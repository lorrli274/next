## Go by Example: For
``` for ``` is Go’s only looping construct. Here are three basic types of ``` for  ```loops.

The most basic type, with a single condition.

A classic initial/condition/after ``` for ```loop.

 ``` for ``` without a condition will loop repeatedly until you break out of the loop or return from the enclosing function.

You can also ``` continue ``` to the next iteration of the loop.

We’ll see some other for forms later when we look at range statements, channels, and other data structures.

```

$ go run for.go
1
2
3
7
8
9
loop
1
3
5
```
