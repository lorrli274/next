## Go by Example: Closures
Go supports ** anonymous functions **, which can form ** closures **. 
Anonymous functions are useful when you want to define a function inline without having to name it.
This function ``` intSeq ``` returns another function, which we define anonymously in the body of ``` intSeq ```. 
The returned function closes over the variable ``` i ``` to form a closure.
```go
func intSeq() func() int {
    i := 0
    return func() int {
        i++
        return i
    }
}
```
We call ``` intSeq ```, assigning the result (a function) to ``` nextInt ```. 
This function value captures its own ``` i ``` value, which will be updated each time we call ``` nextInt ```.
```go
nextInt := intSeq()
```
See the effect of the closure by calling ``` nextInt ``` a few times.
```go
    fmt.Println(nextInt())
    fmt.Println(nextInt())
    fmt.Println(nextInt())
```
To confirm that the state is unique to that particular function, create and test a new one.
```go
    newInts := intSeq()
    fmt.Println(newInts())
```
Below is an example of the program output:
```go
$ go run closures.go
1
2
3
1
```
The last feature of functions weâ€™ll look at for now is * recursion *.
