## Go by Example: Structs
Go’s ** structs **  are typed collections of fields. They’re useful for grouping data together to form records.
This  ``` person``` ```struct ```type has ``` name ``` and ``` age ``` fields.
```go
type person struct {
    name string
    age  int
}
```
This syntax creates a new ``` struct ```.
```go
func main() {
  fmt.Println(person{"Bob", 20})
```
You can name the fields when initializing a ``` struct ```.
```go
    fmt.Println(person{name: "Alice", age: 30})
```
Omitted fields will be ** zero-valued **.
```go
    fmt.Println(person{name: "Fred"})
```
``` Ann ``` & prefix yields a ** pointer ** to the ``` struct ```.
```go
    fmt.Println(&person{name: "Ann", age: 40})
```
Access ``` struct ``` fields with a  dot ```.```
```go
    s := person{name: "Sean", age: 50}
    fmt.Println(s.name)
```
You can also use dots with struct pointers - the pointers are automatically  dereferenced.
```go
    sp := &s
    fmt.Println(sp.age)
```
Structs are ** mutable **.
```go
    sp.age = 51
    fmt.Println(sp.age)
}
```
Below is an example of the program output:
```go
$ go run structs.go
{Bob 20}
{Alice 30}
{Fred 0}
&{Ann 40}
Sean
50
51
```
Next example: * Methods *. 
