# Lesson 52: Number Parsing

Parsing numbers from strings is a basic but common task in many programs; here’s how to do it in Go.

```
package main

import "strconv"
import "fmt"

func main() {

    f, _ := strconv.ParseFloat("1.234", 64)
    fmt.Println(f)
    
    i, _ := strconv.ParseInt("123", 0, 64)
    fmt.Println(i)
    
    d, _ := strconv.ParseInt("0x1c8", 0, 64)
    fmt.Println(d)
    
    u, _ := strconv.ParseUint("789", 0, 64)
    fmt.Println(u)
    
    k, _ := strconv.Atoi("135")
    fmt.Println(k)
    
    _, e := strconv.Atoi("wat")
    fmt.Println(e)
}
```

The built-in package strconv provides the number parsing.

With ParseFloat, this 64 tells how many bits of precision to parse.

For ParseInt, the 0 means infer the base from the string. 64 requires that the result fit in 64 bits.

ParseInt will recognize hex-formatted numbers.

A ParseUint is also available.

Atoi is a convenience function for basic base-10 int parsing.

Parse functions return an error on bad input.

```
$ go run number-parsing.go 
1.234
123
456
789
135
strconv.ParseInt: parsing "wat": invalid syntax
```

Next we’ll look at another common parsing task: URLs.
