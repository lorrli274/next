## Go by Example: Multiple Return Values
Go has built-in support for ** multiple return values **. This feature is used often in idiomatic Go, 
for example to return both result and error values from a function.
The ``` (int, int) ``` in this function signature shows that the function returns 2 ``` int ```.
```go
  func vals() (int, int) {
     return 3, 7
  }
```
Here we use the 2 different return values from the call with ** multiple assignment **.
```go
    func main() {
    a, b := vals()
    fmt.Println(a)
    fmt.Println(b)
```
If you only want a ** subset ** of the returned values, use the blank identifier ``` _ ```.
```go
    _, c := vals()
    fmt.Println(c)
  }
```
The program's output is:
```go
$ go run multiple-return-values.go
3
7
7
```
Accepting a ** variable number of arguments ** is another nice feature of Go functions; weâ€™ll look at this next.
